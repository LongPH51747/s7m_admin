import React, { useState, useEffect } from 'react';
import axios from 'axios';
import ProductItem from '../components/ProductItem';
import '../css/HomeProduct.css'; // for layout
import Sidebar from '../components/Sidebar';
import TopBar from '../components/TopBar';
import { ENDPOINTS } from '../config/api';
import { getAllOrder } from '../services/orderService';

function HomeProduct() {
  // State ƒë·ªÉ l∆∞u th·ªëng k√™ s·∫£n ph·∫©m
  const [stats, setStats] = useState({
    totalProducts: 0,
    totalOrders: 0,
    todayOrders: 0,
    totalRevenue: 0
  });
  const [loading, setLoading] = useState(true);

  // L·∫•y d·ªØ li·ªáu th·ªëng k√™ khi component mount
  useEffect(() => {
    const fetchStats = async () => {
      try {
        setLoading(true);
        
        // G·ªçi API song song ƒë·ªÉ l·∫•y s·∫£n ph·∫©m v√† ƒë∆°n h√†ng
        const [productsResponse, ordersData] = await Promise.all([
          axios.get(ENDPOINTS.GET_PRODUCTS, {
            headers: { 'ngrok-skip-browser-warning': 'true' }
          }),
          getAllOrder()
        ]);

        // T√≠nh t·ªïng s·∫£n ph·∫©m
        const totalProducts = productsResponse.data?.length || 0;

        // T√≠nh t·ªïng ƒë∆°n h√†ng
        const totalOrders = ordersData?.length || 0;

        // T√≠nh ƒë∆°n h√†ng h√¥m nay
        const today = new Date().toDateString();
        const todayOrders = Array.isArray(ordersData) 
          ? ordersData.filter(order => {
              const orderDate = new Date(order.createdAt).toDateString();
              return orderDate === today;
            }).length 
          : 0;

        // T√≠nh t·ªïng doanh thu t·ª´ t·∫•t c·∫£ ƒë∆°n h√†ng
        let totalRevenue = 0;
        if (Array.isArray(ordersData)) {
          totalRevenue = ordersData.reduce((sum, order) => {
            // S·ª≠ d·ª•ng total_amount ho·∫∑c sub_total_amount t·ª´ order
            const orderTotal = order.total_amount || order.sub_total_amount || 0;
            return sum + orderTotal;
          }, 0);
        }

        // C·∫≠p nh·∫≠t state
        setStats({
          totalProducts,
          totalOrders,
          todayOrders,
          totalRevenue
        });
        
        console.log('üìä Th·ªëng k√™:', {
          totalProducts,
          totalOrders,
          todayOrders,
          totalRevenue: totalRevenue.toLocaleString('vi-VN')
        });

      } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y th·ªëng k√™:', error);
        // Gi·ªØ nguy√™n gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  // H√†m format s·ªë ti·ªÅn
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  };

  return (
    <div className="home-page">
      <TopBar />

      <div className="main-content">
        <Sidebar />
      
        <main className="product-content">
          <div className="top-stats">
            <div className="stat-box">
              T·ªïng s·∫£n ph·∫©m
              <b>{loading ? '...' : stats.totalProducts.toLocaleString('vi-VN')}</b>
            </div>
            <div className="stat-box">
              ƒê∆°n h√†ng h√¥m nay
              <b>{loading ? '...' : stats.todayOrders.toLocaleString('vi-VN')}</b>
            </div>
            <div className="stat-box">
              Doanh thu
              <b>{loading ? '...' : formatCurrency(stats.totalRevenue)}</b>
            </div>
          </div>
          <ProductItem />
        </main>
      </div>

      {/* <Footer /> */}
    </div>
  );
}

export default HomeProduct;
