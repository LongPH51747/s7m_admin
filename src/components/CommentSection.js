import React, { useEffect, useState } from "react";
import axios from "axios";
import { Box, Typography, Avatar, Button, Rating, Paper, Chip, IconButton, TextField, Select, MenuItem, FormControl, InputLabel } from "@mui/material";
import { ENDPOINTS, API_BASE } from "../config/api";
import dayjs from "dayjs";
import CloseIcon from '@mui/icons-material/Close';

const CommentSection = ({ productId }) => {
  const [comments, setComments] = useState([]);
  const [avgRating, setAvgRating] = useState(0);
  const [totalReviews, setTotalReviews] = useState(0);
  const [filter, setFilter] = useState(0);
  const [users, setUsers] = useState([]);
  const [deleting, setDeleting] = useState(null);
  const [replying, setReplying] = useState(null); // id comment ƒëang tr·∫£ l·ªùi
  const [replyText, setReplyText] = useState("");
  const [sendingReply, setSendingReply] = useState(false);
  const [selectedQuickReply, setSelectedQuickReply] = useState("");
  const [editingAdminReply, setEditingAdminReply] = useState(null); // id comment ƒëang edit admin reply
  const [editReplyText, setEditReplyText] = useState("");
  const [editSelectedQuickReply, setEditSelectedQuickReply] = useState("");

  // Helper functions ƒë·ªÉ l·∫•y token v√† adminId fresh t·ª´ localStorage
  const getAdminToken = () => localStorage.getItem('token') || '';
  const getAdminId = () => localStorage.getItem('adminId') || 'admin';

  // C√°c c√¢u tr·∫£ l·ªùi nhanh cho admin
  const quickReplies = [
    "C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√° t·ªët cho shop! üòä",
    "C·∫£m ∆°n √Ω ki·∫øn c·ªßa b·∫°n, shop s·∫Ω c·∫£i thi·ªán h∆°n n·ªØa!",
    "R·∫•t vui khi b·∫°n h√†i l√≤ng v·ªõi s·∫£n ph·∫©m c·ªßa shop! üéâ",
    "Shop xin l·ªói v√¨ tr·∫£i nghi·ªám ch∆∞a t·ªët, ch√∫ng t√¥i s·∫Ω kh·∫Øc ph·ª•c!",
    "C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† mua h√†ng t·∫°i shop! ‚ù§Ô∏è",
    "√ù ki·∫øn c·ªßa b·∫°n r·∫•t qu√Ω gi√° v·ªõi ch√∫ng t√¥i!",
    "Shop s·∫Ω c·ªë g·∫Øng c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m!",
    "C·∫£m ∆°n b·∫°n ƒë√£ d√†nh th·ªùi gian ƒë√°nh gi√°!",
    "Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi v·ªõi s·∫£n ph·∫©m! üåü",
    "Shop r·∫•t tr√¢n tr·ªçng ph·∫£n h·ªìi c·ªßa b·∫°n!"
  ];

  useEffect(() => {
    const fetchComments = async () => {
      try {
        const res = await axios.get(ENDPOINTS.GET_COMMENT_BY_PRODUCT_ID(productId), {
          headers: { "ngrok-skip-browser-warning": "true" },
        });
        const data = res.data || [];
        setComments(data);

        if (data.length > 0) {
          const total = data.length;
          const sum = data.reduce((acc, c) => acc + (c.review_rate || 0), 0);
          setAvgRating((sum / total).toFixed(1));
          setTotalReviews(total);
        } else {
          setAvgRating(0);
          setTotalReviews(0);
        }
      } catch (err) {
        setComments([]);
        setAvgRating(0);
        setTotalReviews(0);
      }
    };
    fetchComments();
  }, [productId]);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const res = await axios.get(ENDPOINTS.GET_ALL_USERS, {
          headers: { "ngrok-skip-browser-warning": "true" },
        });
        setUsers(res.data || []);
      } catch (err) {
        setUsers([]);
      }
    };
    fetchUsers();
  }, []);

  const getUserFullName = (userId) => {
    const user = users.find((u) => u._id === userId);
    return user?.fullname || "·∫®n danh";
  };

  const handleDelete = async (id) => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√¨nh lu·∫≠n n√†y?')) return;
    
    const adminToken = getAdminToken();
    
    console.log('üóëÔ∏è Ki·ªÉm tra token khi x√≥a comment:');
    console.log('üì± Admin Token:', adminToken);
    console.log('üÜî Comment ID:', id);
    
    if (!adminToken) {
      alert('B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c thi·∫øu token ƒë·ªÉ x√≥a b√¨nh lu·∫≠n!');
      return;
    }
    
    setDeleting(id);
    try {
      await axios.delete(ENDPOINTS.DELETE_COMMENT_BY_ADMIN(id), {
        headers: { 
          "ngrok-skip-browser-warning": "true",
          Authorization: `Bearer ${adminToken}`
        }
      });
      
      console.log('üóëÔ∏è Admin ƒë√£ x√≥a comment ID:', id);
      setComments((prev) => prev.filter((c) => c._id !== id));
      alert('X√≥a b√¨nh lu·∫≠n th√†nh c√¥ng!');
    } catch (err) {
      let errorMessage = 'X√≥a b√¨nh lu·∫≠n th·∫•t b·∫°i!';
      if (err.response?.status === 401) {
        errorMessage = 'Kh√¥ng c√≥ quy·ªÅn x√≥a! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
      } else if (err.response?.status === 404) {
        errorMessage = 'B√¨nh lu·∫≠n kh√¥ng t√¨m th·∫•y!';
      } else if (err.response?.status === 500) {
        errorMessage = 'L·ªói server! Vui l√≤ng th·ª≠ l·∫°i sau.';
      }
      alert(errorMessage);
    } finally {
      setDeleting(null);
    }
  };

  const customerComments = comments.filter((c) => c.review_user_id !== getAdminId());

  const getAdminReplyFor = (customerComment) => {
    const adminReply = customerComment.admin_reply;
    if (adminReply && adminReply.content && adminReply.content.trim() !== '') {
      return adminReply;
    }
    return null;
  };

  const handleReply = (id) => {
    setReplying(id);
    setReplyText("");
    setSelectedQuickReply("");
  };

  const handleQuickReplyChange = (event) => {
    const selectedText = event.target.value;
    setSelectedQuickReply(selectedText);
    if (selectedText) {
      setReplyText(selectedText);
    }
  };

  const handleEditAdminReply = (comment) => {
    setEditingAdminReply(comment._id);
    setEditReplyText(comment.admin_reply.content);
    setEditSelectedQuickReply("");
  };

  const handleEditQuickReplyChange = (event) => {
    const selectedText = event.target.value;
    setEditSelectedQuickReply(selectedText);
    if (selectedText) {
      setEditReplyText(selectedText);
    }
  };

  const handleUpdateAdminReply = async (customerComment) => {
    if (!editReplyText.trim()) return;
    
    const adminToken = getAdminToken();
    const adminId = getAdminId();
    console.log("AdminId: ",adminId)
    
    if (!adminToken) {
      alert('B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c thi·∫øu token!');
      return;
    }
    
    setSendingReply(true);
    try {
      await axios.patch(ENDPOINTS.CREATE_ADMIN_REPLY(customerComment._id), {
        admin_reply: {
          content: editReplyText,
          adminId: adminId
        }
      }, {
        headers: {
          "ngrok-skip-browser-warning": "true",
          Authorization: `Bearer ${adminToken}`,
          'Content-Type': 'application/json',
        },
      });
      setEditingAdminReply(null);
      setEditReplyText("");
      setEditSelectedQuickReply("");
      
      const res = await axios.get(ENDPOINTS.GET_COMMENT_BY_PRODUCT_ID(productId), {
        headers: { "ngrok-skip-browser-warning": "true" },
      });
      
      setComments(res.data || []);
      alert('C·∫≠p nh·∫≠t tr·∫£ l·ªùi th√†nh c√¥ng!');
    } catch (err) {
      alert('C·∫≠p nh·∫≠t tr·∫£ l·ªùi th·∫•t b·∫°i!');
    } finally {
      setSendingReply(false);
    }
  };

  const handleSendReply = async (customerComment) => {
    if (!replyText.trim()) return;
    
    const adminToken = getAdminToken();
    const adminId = getAdminId();
    console.log("AdminId: ", adminId)
    if (!adminToken) {
      alert('B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c thi·∫øu token!');
      return;
    }
    
    setSendingReply(true);
    try {
      await axios.patch(ENDPOINTS.CREATE_ADMIN_REPLY(customerComment._id), {
        admin_reply: {
          content: replyText,
          adminId: adminId
        }
      }, {
        headers: {
          "ngrok-skip-browser-warning": "true",
          Authorization: `Bearer ${adminToken}`,
          'Content-Type': 'application/json',
        },
      });
      console.log("AdminID: ", adminId)
      setReplying(null);
      setReplyText("");
      setSelectedQuickReply("");
      setEditingAdminReply(null);
      setEditReplyText("");
      setEditSelectedQuickReply("");
      
      const res = await axios.get(ENDPOINTS.GET_COMMENT_BY_PRODUCT_ID(productId), {
        headers: { "ngrok-skip-browser-warning": "true" },
      });
      
      setComments(res.data || []);
      alert('Tr·∫£ l·ªùi th√†nh c√¥ng!');
    } catch (err) {
      alert('G·ª≠i tr·∫£ l·ªùi th·∫•t b·∫°i!');
    } finally {
      setSendingReply(false);
    }
  };

  const filteredComments = filter
    ? customerComments.filter((c) => c.review_rate === filter)
    : customerComments;

  const renderStarFilters = () => (
    <Box sx={{ display: "flex", gap: 2, mb: 2, justifyContent: "center" }}>
      <Button variant={filter === 0 ? "contained" : "outlined"} onClick={() => setFilter(0)}>T·∫•t c·∫£</Button>
      {[5, 4, 3, 2, 1].map((star) => (
        <Button
          key={star}
          variant={filter === star ? "contained" : "outlined"}
          onClick={() => setFilter(star)}
        >
          {star} SAO
        </Button>
      ))}
    </Box>
  );

  return (
    <Box sx={{ width: "100%", maxWidth: 900, mx: "auto", mt: 2, bgcolor: "#f8fbff", borderRadius: 4, p: 3, boxShadow: 2 }}>
      <Typography variant="h5" sx={{ fontWeight: 700, mb: 1, textAlign: "center", color: "#1976d2" }}>
        ƒê√°nh gi√° s·∫£n ph·∫©m
      </Typography>
      <Box sx={{ display: "flex", alignItems: "center", gap: 2, mb: 2, justifyContent: "center" }}>
        <Typography variant="h6" sx={{ color: "#388e3c", fontWeight: 700 }}>{avgRating} tr√™n 5 sao</Typography>
        <Rating value={Number(avgRating)} precision={0.1} readOnly />
        <Typography variant="body2" color="text.secondary">
          ({totalReviews} Reviews)
        </Typography>
      </Box>
      {renderStarFilters()}
      <Box sx={{ color: "#888", fontWeight: 600, mb: 2, textAlign: "center" }}></Box>
      {filteredComments.length === 0 && (
        <Typography textAlign="center">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.</Typography>
      )}
      <Box sx={{ display: "flex", flexDirection: "column", gap: 4 }}>
        {filteredComments.map((c, idx) => {
          const adminReply = getAdminReplyFor(c);
          return (
            <Paper
              key={c._id || idx}
              elevation={3}
              sx={{
                p: 3,
                borderRadius: 3,
                maxWidth: 800,
                mx: "auto",
                mb: 3,
                background: "#fff",
                boxShadow: "0 2px 12px 0 #e3f2fd",
                transition: "box-shadow 0.2s",
                position: 'relative',
                '&:hover': { boxShadow: "0 4px 24px 0 #90caf9" }
              }}
            >
              <IconButton
                size="small"
                aria-label="delete"
                onClick={() => handleDelete(c._id)}
                sx={{
                  position: 'absolute',
                  top: 8,
                  right: 8,
                  color: '#aaa',
                  background: 'rgba(0,0,0,0.03)',
                  '&:hover': { color: '#fff', background: '#e53935' },
                  zIndex: 2,
                }}
                disabled={deleting === c._id}
              >
                <CloseIcon fontSize="small" />
              </IconButton>
              <Box sx={{ display: "flex", alignItems: "center", gap: 2, mb: 1 }}>
                <Avatar sx={{ bgcolor: "#1976d2", color: "#fff", fontWeight: 700 }}>
                  {getUserFullName(c.review_user_id)?.[0] || (idx + 1).toString()}
                </Avatar>
                <Typography sx={{ fontWeight: 700, mr: 1, color: "#1976d2" }}>
                  {getUserFullName(c.review_user_id)}
                </Typography>
                <Rating value={c.review_rate} readOnly size="small" sx={{ mr: 1 }} />
                <Typography variant="body2" color="text.secondary" sx={{ mr: 1 }}>
                  {dayjs(c.createdAt).format("DD-MM-YYYY")}
                </Typography>
                {c.variant_color && (
                  <Chip label={`M√†u: ${c.variant_color}`} size="small" sx={{ bgcolor: "#e3f2fd", color: "#1976d2", fontWeight: 600, mr: 1 }} />
                )}
                {c.variant_size && (
                  <Chip label={`Size: ${c.variant_size}`} size="small" sx={{ bgcolor: "#fffde7", color: "#fbc02d", fontWeight: 600 }} />
                )}
              </Box>
              <Typography sx={{ mb: 1, fontSize: 16, color: "#333" }}>{c.review_comment}</Typography>
              {c.review_image && c.review_image.length > 0 && (
                <Box sx={{ display: "flex", gap: 2, mt: 1, flexWrap: "wrap" }}>
                  {c.review_image.map((img, i) => (
                    <img
                      key={i}
                      src={img.startsWith("http") ? img : `${API_BASE}${img}`}
                      alt="review"
                      style={{
                        width: 90,
                        height: 110,
                        objectFit: "cover",
                        borderRadius: 8,
                        border: "1px solid #eee",
                        boxShadow: "0 2px 8px #e3f2fd",
                        marginRight: 8,
                      }}
                    />
                  ))}
                </Box>
              )}
                            {!adminReply && (
                  replying === c._id ? (
                    <Box sx={{ mt: 2, display: 'flex', flexDirection: 'column', gap: 2 }}>
                      <FormControl size="small" sx={{ width: '100%' }}>
                        <InputLabel>Ch·ªçn c√¢u tr·∫£ l·ªùi nhanh (t√πy ch·ªçn)</InputLabel>
                        <Select
                          value={selectedQuickReply}
                          onChange={handleQuickReplyChange}
                          label="Ch·ªçn c√¢u tr·∫£ l·ªùi nhanh (t√πy ch·ªçn)"
                          sx={{ fontSize: 14 }}
                        >
                          <MenuItem value="">
                            <em>Nh·∫≠p tr·∫£ l·ªùi t√πy ch·ªânh</em>
                          </MenuItem>
                          {quickReplies.map((reply, index) => (
                            <MenuItem key={index} value={reply} sx={{ fontSize: 13, whiteSpace: 'pre-wrap' }}>
                              {reply}
                            </MenuItem>
                          ))}
                        </Select>
                      </FormControl>
                      
                      <TextField
                        multiline
                        minRows={2}
                        maxRows={5}
                        value={replyText}
                        onChange={e => setReplyText(e.target.value)}
                        placeholder="Nh·∫≠p n·ªôi dung tr·∫£ l·ªùi ho·∫∑c ch·ªçn t·ª´ dropdown b√™n tr√™n..."
                        size="small"
                        sx={{ width: '100%' }}
                      />
                      
                      <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>
                        <Button
                          variant="contained"
                          size="small"
                          onClick={() => handleSendReply(c)}
                          disabled={sendingReply || !replyText.trim()}
                        >
                          G·ª≠i tr·∫£ l·ªùi
                        </Button>
                        <Button
                          variant="text"
                          size="small"
                          onClick={() => {
                            setReplying(null);
                            setSelectedQuickReply("");
                          }}
                          disabled={sendingReply}
                        >
                          H·ªßy
                        </Button>
                      </Box>
                    </Box>
                  ) : (
                  <Button
                    variant="outlined"
                    size="small"
                    sx={{ mt: 2, fontWeight: 600, color: '#1976d2', borderColor: '#1976d2' }}
                    onClick={() => handleReply(c._id)}
                  >
                    Tr·∫£ l·ªùi
                  </Button>
                )
              )}
              {adminReply && (
                <Box sx={{ mt: 2, ml: 4, p: 2, bgcolor: '#f1f8e9', borderRadius: 2, borderLeft: '4px solid #388e3c' }}>
                  {editingAdminReply === c._id ? (
                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                      <Typography sx={{ fontWeight: 700, color: '#388e3c', mb: 1 }}>Ch·ªânh s·ª≠a tr·∫£ l·ªùi admin:</Typography>
                      
                      <FormControl size="small" sx={{ width: '100%' }}>
                        <InputLabel>Ch·ªçn c√¢u tr·∫£ l·ªùi nhanh (t√πy ch·ªçn)</InputLabel>
                        <Select
                          value={editSelectedQuickReply}
                          onChange={handleEditQuickReplyChange}
                          label="Ch·ªçn c√¢u tr·∫£ l·ªùi nhanh (t√πy ch·ªçn)"
                          sx={{ fontSize: 14 }}
                        >
                          <MenuItem value="">
                            <em>Nh·∫≠p tr·∫£ l·ªùi t√πy ch·ªânh</em>
                          </MenuItem>
                          {quickReplies.map((reply, index) => (
                            <MenuItem key={index} value={reply} sx={{ fontSize: 13, whiteSpace: 'pre-wrap' }}>
                              {reply}
                            </MenuItem>
                          ))}
                        </Select>
                      </FormControl>
                      
                      <TextField
                        multiline
                        minRows={2}
                        maxRows={5}
                        value={editReplyText}
                        onChange={e => setEditReplyText(e.target.value)}
                        placeholder="Ch·ªânh s·ª≠a n·ªôi dung tr·∫£ l·ªùi..."
                        size="small"
                        sx={{ width: '100%' }}
                      />
                      
                      <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>
                        <Button
                          variant="contained"
                          size="small"
                          onClick={() => handleUpdateAdminReply(c)}
                          disabled={sendingReply || !editReplyText.trim()}
                          sx={{ bgcolor: '#388e3c', '&:hover': { bgcolor: '#2e7d32' } }}
                        >
                          C·∫≠p nh·∫≠t
                        </Button>
                        <Button
                          variant="text"
                          size="small"
                          onClick={() => {
                            setEditingAdminReply(null);
                            setEditReplyText("");
                            setEditSelectedQuickReply("");
                          }}
                          disabled={sendingReply}
                        >
                          H·ªßy
                        </Button>
                      </Box>
                    </Box>
                  ) : (
                    <>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 0.5 }}>
                        <Typography sx={{ fontWeight: 700, color: '#388e3c' }}>Admin tr·∫£ l·ªùi:</Typography>
                        <Typography variant="caption" sx={{ color: '#666' }}>
                          {dayjs(adminReply.createdAt).format("DD-MM-YYYY HH:mm")}
                        </Typography>
                      </Box>
                      <Typography sx={{ color: '#333', fontSize: 15, mb: 2 }}>{adminReply.content}</Typography>
                      
                      <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                        <Button
                          variant="text"
                          size="small"
                          onClick={() => handleEditAdminReply(c)}
                          sx={{ 
                            color: '#388e3c', 
                            fontWeight: 600,
                            '&:hover': { bgcolor: 'rgba(56, 142, 60, 0.1)' }
                          }}
                        >
                          Ch·ªânh s·ª≠a
                        </Button>
                      </Box>
                    </>
                  )}
                </Box>
              )}
            </Paper>
          );
        })}
      </Box>
    </Box>
  );
};

export default CommentSection;
