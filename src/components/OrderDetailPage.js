import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getOrderById, updateOrderStatusApi } from '../services/orderService';
import { getByIdAddress } from '../services/addressService';
import statusColors from '../utils/StatusColors';

const OrderDetailPage = () => {
  const { orderCode } = useParams();
  const rawId = orderCode.replace(/^SMT/, '');

  const [order, setOrder] = useState(null);
  const [receiverName, setReceiverName] = useState('...');
  const [phone, setPhone] = useState('...');
  const [address, setAddress] = useState('...');
  const [newStatus, setNewStatus] = useState('');
  const [isUpdating, setIsUpdating] = useState(false);

  useEffect(() => {
    const fetchDetail = async () => {
      try {
        const orderData = await getOrderById(rawId);
        setOrder(orderData);
        setNewStatus(orderData.status);

       
          const addressInfo = await getByIdAddress(orderData.id_address._id);
          console.log("orderdata.address", orderData.id_address );
          console.log( "orderdata", orderData);
          
          
          console.log("üìç Th√¥ng tin ƒë·ªãa ch·ªâ:", addressInfo);

          setReceiverName(addressInfo?.fullName || 'Kh√¥ng r√µ');
          setPhone(addressInfo?.phone_number || 'Kh√¥ng r√µ');
          setAddress(addressInfo?.addressDetail || 'Kh√¥ng r√µ');
        
          console.warn('‚ö†Ô∏è ƒê∆°n h√†ng kh√¥ng c√≥ id_address.');
        
      } catch (err) {
        console.error('‚ùå L·ªói khi t·∫£i chi ti·∫øt ƒë∆°n h√†ng:', err);
      }
    };

    fetchDetail();
  }, [rawId]);

  const handleUpdateStatus = async () => {
    try {
      setIsUpdating(true);
      await updateOrderStatusApi(rawId, { status: newStatus });
      alert("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");
    } catch (err) {
      alert("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
      console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
    } finally {
      setIsUpdating(false);
    }
  };

  if (!order) {
    return <div className="p-6 text-center text-gray-600">‚è≥ ƒêang t·∫£i th√¥ng tin ƒë∆°n h√†ng...</div>;
  }

  return (
    <div className="max-w-5xl mx-auto p-6 border-2 border-blue-500 rounded-lg bg-gray-50">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">ƒê∆†N H√ÄNG #{orderCode}</h1>
        <span className={`px-4 py-1 rounded-full font-semibold ${statusColors[order.status]}`}>
          {order.status}
        </span>
      </div>

      <div className="grid grid-cols-3 gap-6">
        <div className="col-span-2 space-y-6">
          <div className="bg-white p-4 rounded shadow">
            <h2 className="font-bold text-lg mb-2">Th√¥ng Tin ƒê·∫∑t H√†ng</h2>
            <p>Ng√†y ƒë·∫∑t h√†ng: <strong>{new Date(order.createdAt).toLocaleDateString()}</strong></p>
            <p>V·∫≠n chuy·ªÉn: <strong>{order.shipping || '...'}</strong></p>
            <p>Thanh to√°n: <strong>{order.paymentMethod || 'Kh√¥ng r√µ'}</strong></p>
          </div>

          <div className="bg-white p-4 rounded shadow">
            <h2 className="font-bold text-lg mb-2">Th√¥ng Tin Kh√°ch H√†ng</h2>
            <p>T√™n ng∆∞·ªùi nh·∫≠n: <strong>{receiverName}</strong></p>
            <p>ƒêi·ªán tho·∫°i: {phone}</p>
            <p>ƒê·ªãa ch·ªâ: {address}</p>
          </div>
        </div>

        <div className="space-y-6">
          <div className="bg-white p-4 rounded shadow">
            <h2 className="font-bold text-lg mb-2">Tr·∫°ng Th√°i ƒê∆°n H√†ng</h2>
            <select
              className="w-full border px-3 py-2 rounded mb-2"
              value={newStatus}
              onChange={(e) => setNewStatus(e.target.value)}
            >
              {/* <option value="Ch·ªù x√°c nh·∫≠n">Ch·ªù x√°c nh·∫≠n</option> */}
              <option value="ƒê√£ x√°c nh·∫≠n">ƒê√£ x√°c nh·∫≠n</option>
              <option value="ƒêang giao">ƒêang giao</option>
              <option value="Giao th√†nh c√¥ng">Giao th√†nh c√¥ng</option>
              {/* <option value="Ho√†n h√†ng">Ho√†n h√†ng</option> */}
              <option value="H·ªßy">H·ªßy</option>
            </select>
            <button
              className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700"
              onClick={handleUpdateStatus}
              disabled={isUpdating}
            >
              {isUpdating ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t'}
            </button>
          </div>

          <div className="bg-white p-4 rounded shadow">
            <h2 className="font-bold text-lg mb-2">S·∫£n ph·∫©m</h2>
            <p className="text-gray-500 italic">Ch∆∞a c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m.</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OrderDetailPage;
