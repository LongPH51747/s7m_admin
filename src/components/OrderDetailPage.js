import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getOrderById, updateOrderStatusApi } from '../services/orderService';
import { getByIdAddress } from '../services/addressService';
import statusColors from '../utils/StatusColors';

const OrderDetailPage = () => {
  const { orderCode } = useParams();
  const rawId = orderCode.replace(/^SMT/, '');

  const [order, setOrder] = useState(null);
  const [receiverName, setReceiverName] = useState('...');
  const [phone, setPhone] = useState('...');
  const [address, setAddress] = useState('...');
  const [newStatus, setNewStatus] = useState('');
  const [isUpdating, setIsUpdating] = useState(false);

  useEffect(() => {
    const fetchDetail = async () => {
      try {
        const orderData = await getOrderById(rawId);
        setOrder(orderData);
        setNewStatus(orderData.status);

       
          const addressInfo = await getByIdAddress(orderData.id_address._id);
          console.log("orderdata.address", orderData.id_address );
          console.log( "orderdata", orderData);
          
          
          console.log("üìç Th√¥ng tin ƒë·ªãa ch·ªâ:", addressInfo);

          setReceiverName(addressInfo?.fullName || 'Kh√¥ng r√µ');
          setPhone(addressInfo?.phone_number || 'Kh√¥ng r√µ');
          setAddress(addressInfo?.addressDetail || 'Kh√¥ng r√µ');
        
          console.warn('‚ö†Ô∏è ƒê∆°n h√†ng kh√¥ng c√≥ id_address.');
        
      } catch (err) {
        console.error('‚ùå L·ªói khi t·∫£i chi ti·∫øt ƒë∆°n h√†ng:', err);
      }
    };

    fetchDetail();
  }, [rawId]);

  const handleUpdateStatus = async () => {
    try {
      setIsUpdating(true);
      await updateOrderStatusApi(rawId, { status: newStatus });
setOrder((prev) => ({ ...prev, status: newStatus }));
alert("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");

    } catch (err) {
      alert("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
      console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
    } finally {
      setIsUpdating(false);
    }
  };

  if (!order) {
    return <div className="p-6 text-center text-gray-600">‚è≥ ƒêang t·∫£i th√¥ng tin ƒë∆°n h√†ng...</div>;
  }

  return (
    <div className="max-w-5xl mx-auto p-6 border-t-4 rounded-b-lg bg-gray-50 shadow">
  {/* Header */}
  <div className="flex justify-between items-center border-b-2 border-black-400 pb-3 mb-4">
    <h1 className="text-xl font-bold">ƒê∆†N H√ÄNG #{orderCode}</h1>
    <span
  className={`px-4 py-1 rounded-full font-semibold text-sm capitalize ${statusColors[order.status] || 'bg-gray-100 text-gray-500'}`}
>
  {order.status}
</span>

  </div>

  {/* Th√¥ng tin kh√°ch + tr·∫°ng th√°i */}
  <div className="grid grid-cols-2 gap-6 mb-6">
    <div className="bg-white p-4 rounded shadow">
      <h2 className="font-bold text-md mb-2">Th√¥ng Tin Kh√°ch H√†ng</h2>
      <p>T√™n kh√°ch h√†ng: <strong>{receiverName}</strong></p>
      {/* <p>Email: {order.email || 'Kh√¥ng c√≥'}</p> */}
      <p>S·ªë ƒëi·ªán tho·∫°i: {phone}</p>
      <p>ƒê·ªãa ch·ªâ: {address}</p>
    </div>

    <div className="bg-white p-4 rounded shadow">
      <h2 className="font-bold text-md mb-2">Tr·∫°ng Th√°i ƒê∆°n H√†ng</h2>
      <select
        className="w-full border px-3 py-2 rounded mb-3"
        value={newStatus}
        onChange={(e) => setNewStatus(e.target.value)}
      >
        <option value="ƒê√£ x√°c nh·∫≠n">ƒê√£ x√°c nh·∫≠n</option>
        <option value="ƒêang giao">ƒêang giao</option>
        <option value="Giao th√†nh c√¥ng">Giao th√†nh c√¥ng</option>
        <option value="H·ªßy">H·ªßy</option>
      </select>
      <button
        className="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600 w-full"
        onClick={handleUpdateStatus}
        disabled={isUpdating}
      >
        {isUpdating ? 'ƒêang c·∫≠p nh·∫≠t...' : 'C·∫≠p nh·∫≠t'}
      </button>
    </div>
  </div>

  {/* Th√¥ng tin ƒë·∫∑t h√†ng */}
  <div className="bg-gray-100 p-4 rounded mb-6">
    <h2 className="font-bold text-md mb-2">Th√¥ng Tin ƒê·∫∑t H√†ng</h2>
    <p>Ng√†y ƒë·∫∑t h√†ng: <strong>{new Date(order.createdAt).toLocaleDateString()}</strong></p>
    <p>H√¨nh th·ª©c v·∫≠n chuy·ªÉn: <strong>{order.shipping}</strong></p>
    <p>H√¨nh th·ª©c thanh to√°n: <strong>{order.paymentMethod}</strong></p>
  </div>

  {/* Danh s√°ch ƒë∆°n h√†ng */}
  <div className="bg-white p-4 rounded shadow">
    <h2 className="font-bold text-lg mb-4">ƒê∆°n H√†ng</h2>
    <table className="w-full text-left border-collapse text-sm">
      <thead className="bg-gray-100 text-gray-700">
        <tr>
          <th className="p-2">S·∫£n ph·∫©m</th>
          <th className="p-2">color</th>
          <th className="p-2">size</th>
          <th className="p-2">S·ªë l∆∞·ª£ng</th>
          <th className="p-2">Gi√° ti·ªÅn</th>
          <th className="p-2">T·ªïng ti·ªÅn</th>
        </tr>
      </thead>
      <tbody>
        {order.orderItems.map((item, index) => (
          <tr key={index} className="border-t text-sm">
            <td className="p-2">{item.name_product}</td>
            <td className="p-2">{item.color}</td>
            <td className="p-2">{item.size}</td>
            <td className="p-2">{item.quantity}</td>
            <td className="p-2">{item.unit_price_item}</td>
            <td className="p-2">{item.total_price_item}</td>
          </tr>
        ))}
      </tbody>
      <tfoot className="text-sm">
  <tr className="border-t font-medium">
    <td colSpan="5" className="p-2 text-right">T·ªïng ti·ªÅn</td>
    <td className="p-2">{order.sub_total_amount.toLocaleString()}</td>
  </tr>
  <tr className="font-medium">
    <td colSpan="5" className="p-2 text-right">Shipping</td>
    <td className="p-2">{(order.shipping || 0).toLocaleString()}</td>
  </tr>
  <tr className="border-t font-bold text-green-700 text-base">
    <td colSpan="5" className="p-2 text-right">Thanh to√°n</td>
    <td className="p-2">{(order.total_amount - (order.voucher || 0)).toLocaleString()}</td>
  </tr>
</tfoot>

    </table>
  </div>
</div>

  );
};

export default OrderDetailPage;
